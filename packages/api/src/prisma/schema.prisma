datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

enum Role {
    user
    admin
}

enum IntegrationType {
    google_calendar
    google_meet
}

enum AgentType {
    ANTI_SCAM // requires valid US phonenumber
    AUTOMATED_CUSTOMER_SUPPORT // requires valid US phonenumber
    CHATBOT // doesn't require phonenumber
}

enum EntityType {
    AGENT
    USER
    CONVERSATION
}

model Users {
    id                     String                 @id @default(cuid())
    uId                    String                 @unique @default(cuid())
    username               String?
    fullname               String?
    email                  String
    avatar                 String?
    role                   Role                   @default(user)
    google_ref_token       String?
    createdAt              DateTime               @default(now())
    conversations          Conversations[]
    verified_phone_numbers VerifiedPhoneNumbers[]
    agents                 Agents[]

    @@map(name: "users")
}

// users are limited to 2 agents per workspace
// AI Agents
model Agents {
    id     String    @id @default(cuid())
    userId String
    name   String
    type   AgentType

    // required! for [ANTI_SCAM, AUTOMATED_CUSTOMER_SUPPORT]
    phonenumber String? // Must be a US number

    dial_code String?
    country   String?

    // welcome message for the agent 
    welcome_message String?

    // Protection mean't for anti-scam agents
    seed_phrase String?

    created_at    DateTime        @default(now())
    Conversations Conversations[]
    users         Users           @relation(fields: [userId], references: [uId])

    @@index([userId])
}

// integrations added by user
model Integration {
    id      String          @id @default(cuid())
    wsId    String          @unique
    type    IntegrationType
    enabled Boolean         @default(false)

    @@index([wsId])
    @@map(name: "integrations")
}

model Conversations {
    id         String   @id @default(cuid())
    wsId       String
    agentId    String
    userId     String
    created_at DateTime @default(now())
    escalated  Boolean  @default(false)

    user     Users      @relation(fields: [userId], references: [id])
    Agents   Agents?    @relation(fields: [agentId], references: [id])
    messages Messages[]

    conv_account ConversationAccount[]

    @@index([wsId])
    @@index([agentId])
    @@index([userId])
}

// Only mean't for users using the chatbot widget
model ConversationAccount {
    id          String   @id @default(cuid())
    wsId        String
    con_user_id String
    email       String
    name        String
    verified    Boolean  @default(false)
    created_at  DateTime @default(now())

    conversations Conversations @relation(fields: [con_user_id], references: [id])

    @@index([wsId])
    @@index([con_user_id])
}

model MessageEntity {
    id         String     @id @default(cuid())
    entityId   String
    entityType EntityType
    message    Messages[]

    @@unique([entityId])
}

model Messages {
    id         String   @id @default(cuid())
    convId     String
    entityId   String
    content    String
    created_at DateTime @default(now())
    agentsId   String?

    conversations Conversations @relation(fields: [convId], references: [id])
    entity        MessageEntity @relation(fields: [entityId], references: [entityId])

    @@index([entityId])
    @@index([agentsId])
    @@index([convId])
}

model VerifiedPhoneNumbers {
    id         String   @id @default(cuid())
    userId     String
    phone      String   @unique
    isInUse    Boolean  @default(false)
    created_at DateTime @default(now())

    users Users @relation(fields: [userId], references: [uId])

    @@index([userId])
}
