datasource db {
    provider     = "postgresql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
    extensions   = [pgvector(map: "vector")]
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

enum Role {
    user
    admin
}

enum IntegrationType {
    google_calendar
    google_meet
}

enum AgentType {
    ANTI_THEFT // requires valid US phonenumber
    SALES_ASSISTANT // requires valid US phonenumber
    CHATBOT // doesn't require phonenumber
}

enum ChatMsgRoles {
    agent
    admin
    customer
}

enum CallLogMsgType {
    agent
    user
}

enum CallLogAnalysisType {
    positive
    negative
    neutral
}

enum KnowledgeBaseType {
    TXT
    WEB_PAGES
    PDF
    YT_VIDEOS
    NOTION // COMING SOON
}

enum SubscriptionStatus {
    // Currently in a trial period.
    on_trial

    // Active with ongoing payments.
    active

    // Payment collection paused.
    paused

    // Renewal payment failed, with retries.
    past_due

    // Unsuccessful payment recovery after 4 attempts.
    unpaid

    // Future payments cancelled, but still on a grace period.
    cancelled

    // Subscription has expired.
    expired
}

enum SubscriptionType {
    IN_APP // handle the in-app subscription for premium features
    TWILIO_PHONE_NUMBERS // handle the twilio phone numbers subscription
}

enum HandoverCondition {
    emergency
    help
}

enum KnowledgeBaseStatus {
    trained
    untrained
}

model Users {
    id                String                  @id @default(cuid())
    uId               String                  @unique @default(cuid())
    username          String?
    fullname          String?
    email             String
    avatar            String?
    role              Role                    @default(user)
    google_ref_token  String?
    createdAt         DateTime                @default(now())
    used_numbers      UsedPhoneNumbers[]
    purchased_numbers PurchasedPhoneNumbers[]
    agents            Agents[]
    subscriptions     Subscriptions[]
    knowledge_base    KnowledgeBase[]
    call_logs         CallLogs[]

    @@map(name: "users")
}

// users are limited to 2 agents per workspace
// AI Agents
model Agents {
    id     String    @id @default(cuid())
    userId String
    name   String
    type   AgentType

    // by default , every agent remains deactivated
    activated Boolean @default(false)

    // forwarding number (AUTOMATED CUSTOMER SUPPORT ONly)
    forwarding_number ForwardingNumber?

    created_at            DateTime               @default(now())
    Conversations         Conversations[]
    users                 Users                  @relation(fields: [userId], references: [uId], onDelete: Cascade)
    protected_numbers     ProtectedNumbers[]
    used_number           UsedPhoneNumbers?
    linked_knowledge_base LinkedKnowledgeBase[]
    agent_settings        AgentSettings?
    purchased_number      PurchasedPhoneNumbers?
    call_logs             CallLogs[]
    integrations          Integration[]
    chatbot_config        ChatbotConfig?

    @@index([userId])
    @@map(name: "agents")
}

model AgentSettings {
    id      String @id @default(cuid())
    agentId String @unique

    // GENERAL (ALL Agents)
    welcome_message String?

    // ANTI-THEFT seetings (ONLY)
    allow_handover     Boolean            @default(false)
    handover_condition HandoverCondition? @default(emergency)
    security_code      String? // if it an emergency, this code would be required.

    agents Agents @relation(fields: [agentId], references: [id], onDelete: Cascade)

    @@index([agentId])
    @@map(name: "agent_settings")
}

// CHATBOT AGENT CONFIG
model ChatbotConfig {
    id      String @id @default(cuid())
    agentId String @unique

    brand_name  String?
    logo        String?
    brand_color String?
    text_color  String?

    welcome_message     String?
    suggested_questions String?

    agents Agents @relation(fields: [agentId], references: [id], onDelete: Cascade)

    @@index([agentId])
    @@map(name: "chatbot_config")
}

model ForwardingNumber {
    id         String   @id @default(cuid())
    agentId    String   @unique
    phone      String   @unique
    country    String?
    created_at DateTime @default(now())

    agents Agents @relation(fields: [agentId], references: [id], onDelete: Cascade)

    @@index([agentId])
    @@map(name: "forwarding_numbers")
}

// ANTI_THEFT Only (TODOS)
model ProtectedNumbers {
    id         String   @id @default(cuid())
    agentId    String
    phone      String   @unique
    dial_code  String?
    country    String?
    created_at DateTime @default(now())

    agents Agents @relation(fields: [agentId], references: [id], onDelete: Cascade)

    @@index([agentId])
    @@map(name: "protected_numbers")
}

// Table to store users purchased phone numbers
model PurchasedPhoneNumbers {
    id       String  @id @default(cuid())
    userId   String
    phone    String  @unique
    country  String?
    sub_id   String? @unique // subscription id
    agent_id String? @unique // agent id

    // twilio config
    phone_number_sid String?
    bundle_sid       String?

    is_deleted Boolean? @default(false)

    created_at DateTime @default(now())

    users  Users   @relation(fields: [userId], references: [uId], onDelete: Cascade)
    agents Agents? @relation(fields: [agent_id], references: [id], onDelete: Cascade)

    @@index([userId])
    @@map("purchased_phone_numbers")
}

model UsedPhoneNumbers {
    id         String   @id @default(cuid())
    agentId    String   @unique
    userId     String
    phone      String   @unique
    dial_code  String?
    country    String?
    created_at DateTime @default(now())

    is_deleted Boolean? @default(false)

    agents Agents @relation(fields: [agentId], references: [id], onDelete: Cascade)
    users  Users  @relation(fields: [userId], references: [uId], onDelete: Cascade)

    @@index([agentId])
    @@index([userId])
    @@map(name: "used_phone_numbers")
}

model KnowledgeBase {
    id         String               @id @default(cuid())
    userId     String
    status     KnowledgeBaseStatus? @default(untrained)
    created_at DateTime             @default(now())

    kb_data               KnowledgeBaseData[]
    user                  Users                 @relation(fields: [userId], references: [uId], onDelete: Cascade)
    linked_knowledge_base LinkedKnowledgeBase[]

    @@index([userId])
    @@map("knowledge_base")
}

// Knowledge base data (TXT, WEB_PAGES, PDF, YT_VIDEOS)
model KnowledgeBaseData {
    id         String                 @id @default(cuid())
    kb_id      String
    user_id    String
    type       KnowledgeBaseType
    title      String?
    embedding  Unsupported("vector")?
    content    String
    created_at DateTime               @default(now())
    updated_at DateTime               @updatedAt

    kb KnowledgeBase @relation(fields: [kb_id], references: [id], onDelete: Cascade)

    @@index([kb_id])
    @@map(name: "knowledge_base_data")
}

// Linked Knowledge base to agents
model LinkedKnowledgeBase {
    id         String   @id @default(cuid())
    agentId    String
    kb_id      String
    created_at DateTime @default(now())

    agents Agents        @relation(fields: [agentId], references: [id], onDelete: Cascade)
    kb     KnowledgeBase @relation(fields: [kb_id], references: [id], onDelete: Cascade)

    @@index([agentId])
    @@index([kb_id])
    @@map(name: "linked_knowledge_base")
}

// integrations added by user
model Integration {
    id       String          @id @default(cuid())
    agent_id String
    type     IntegrationType
    url      String

    created_at DateTime @default(now())

    agents Agents @relation(fields: [agent_id], references: [id], onDelete: Cascade)

    @@index([agent_id])
    @@map(name: "integrations")
}

// Conversation can only be initiated from a conversation account via (chat widget)
model Conversations {
    id                    String   @id @default(cuid())
    agentId               String
    created_at            DateTime @default(now())
    conversationAccountId String?

    agents              Agents?                        @relation(fields: [agentId], references: [id])
    chat_messages       ChatMessages[]
    widget_user_account ChatWidgetAccount?             @relation(fields: [conversationAccountId], references: [id])
    escalation_periods  ConversationEscalationPeriod[]

    @@index([agentId])
    @@index([conversationAccountId])
    @@map(name: "conversations")
}

model ChatWidgetAccount {
    id       String  @id @default(cuid())
    email    String
    name     String
    verified Boolean @default(false)

    refresh_token String?

    // location metadata
    country_code String?
    state        String?
    city         String?

    created_at DateTime @default(now())

    conversations Conversations[]

    @@map(name: "chat_widget_account")
}

model ChatMessages {
    id               String       @id @default(cuid())
    convId           String
    role             ChatMsgRoles
    senderId         String?
    content          String
    created_at       DateTime     @default(now())
    agentId          String?
    is_read_customer Boolean?     @default(false)
    is_read_admin    Boolean?     @default(false)

    conversations Conversations @relation(fields: [convId], references: [id])

    @@index([senderId])
    @@index([agentId])
    @@index([convId])
    @@map(name: "messages")
}

// keep track when a specific conversation was escalated to human support
model ConversationEscalationPeriod {
    id             String    @id @default(cuid())
    conv_id        String
    agent_id       String
    is_escalated   Boolean   @default(false)
    last_msg_index Int? // last message index before escalation
    start_date     DateTime?

    conversations Conversations @relation(fields: [conv_id], references: [id])

    @@index([conv_id])
}

// call logs
model CallLogs {
    id             String  @id @default(cuid())
    refId          String  @unique
    agentId        String
    userId         String
    from_number    String
    to_number      String
    caller_country String
    caller_state   String?
    zip_code       String

    created_at DateTime @default(now())

    analysis CallLogsAnalysis?

    agent    Agents             @relation(fields: [agentId], references: [id])
    user     Users              @relation(fields: [userId], references: [id])
    messages CallLogsMessages[]
    entries  CallLogEntry?
    is_read  Boolean?           @default(false)

    @@index([agentId])
    @@index([userId])
    @@map(name: "call_logs")
}

model CallLogsMessages {
    id          String          @id @default(cuid())
    call_log_id String
    fromId      String
    toId        String
    entity_type CallLogMsgType?
    content     String
    created_at  DateTime        @default(now())

    call_logs CallLogs @relation(fields: [call_log_id], references: [id])

    @@index([fromId])
    @@index([toId])
    @@index([call_log_id])
    @@map(name: "call_logs_messages")
}

model CallLogEntry {
    id         String   @id @default(cuid())
    refId      String   @unique
    callReason String?
    callerName String?
    referral   String?
    message    String?
    createdAt  DateTime @default(now())

    call_logs CallLogs @relation(fields: [refId], references: [refId], onDelete: Cascade)

    @@map(name: "call_log_entry")
}

// Call logs Analysis
model CallLogsAnalysis {
    id        String @id @default(cuid())
    callLogId String @unique

    // sentiment analysis for each call log
    //  this is to identify if the call was malicious, spam, or genuine
    sentiment        String?
    suggested_action String?
    confidence       Int?
    type             CallLogAnalysisType?
    red_flags        String?

    created_at DateTime @default(now())

    call_logs CallLogs @relation(fields: [callLogId], references: [id])

    @@index([callLogId])
    @@map(name: "call_logs_analysis")
}

// Subscriptions

model Subscriptions {
    id         String  @id @default(cuid())
    uId        String
    user_name  String?
    user_email String?

    type SubscriptionType

    grace_period DateTime? // 3 days grace period for (TWILIO_PHONE_NUMBERS)

    product_id   String
    product_name String?
    variant_id   String?
    variant_name String?

    order_id String
    store_id String

    is_deleted Boolean? @default(false)

    subscription_id String? @unique
    customer_id     String?

    card_brand     String?
    card_last_four String?

    status SubscriptionStatus @default(on_trial)

    ends_at   DateTime?
    renews_at DateTime?
    createdAt DateTime  @default(now())

    test_mode Boolean @default(false)

    user Users @relation(fields: [uId], references: [uId])

    @@map(name: "subscriptions")
}
